<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on BeMg</title>
    <link>https://bemg.github.io/blog/posts/</link>
    <description>Recent content in Posts on BeMg</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 26 Feb 2018 19:03:58 +0800</lastBuildDate>
    
        <atom:link href="https://bemg.github.io/blog/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>LLVM 筆記 (更新中)</title>
      <link>https://bemg.github.io/blog/posts/llvm-notes/</link>
      <pubDate>Mon, 26 Feb 2018 19:03:58 +0800</pubDate>
      
      <guid>https://bemg.github.io/blog/posts/llvm-notes/</guid>
      <description>

&lt;h2 id=&#34;目錄&#34;&gt;目錄&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;前言&lt;/li&gt;
&lt;li&gt;架構&lt;/li&gt;
&lt;li&gt;實驗&lt;/li&gt;
&lt;li&gt;參考資料&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;

&lt;p&gt;LLVM是一個完整的編譯器基礎建設(compiler infrastructure)，與&lt;code&gt;GNU GCC&lt;/code&gt;相比，最大的差異在於大量的將compile的過程高度模組化，可以進行任意的抽換。從 source code 到 machine code，每一個階段都有相對應的module。&lt;/p&gt;

&lt;h2 id=&#34;安裝&#34;&gt;安裝&lt;/h2&gt;

&lt;p&gt;從原始碼開始從頭編譯&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;apt-get update
apt-get install -y sudo subversion python-dev g++ cmake
svn co http://llvm.org/svn/llvm-project/llvm/trunk llvm
cd llvm/tools
svn co http://llvm.org/svn/llvm-project/cfe/trunk clang
cd ../..
cd llvm/tools/clang/tools
svn co http://llvm.org/svn/llvm-project/clang-tools-extra/trunk extra
cd ../../../..
cd llvm/tools
svn co http://llvm.org/svn/llvm-project/lld/trunk lld
cd ../..
cd llvm
mkdir build
cd build
cmake -G &amp;quot;Unix Makefiles&amp;quot; -DCMAKE_BUILD_TYPE=Release ..
make
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;架構&#34;&gt;架構&lt;/h2&gt;

&lt;h3 id=&#34;compiler-架構&#34;&gt;compiler 架構&lt;/h3&gt;

&lt;p&gt;在常見的compiler中，常見這類三段式的設計。
&lt;img src=&#34;https://i.imgur.com/miah8lO.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;FrontEnd

&lt;ul&gt;
&lt;li&gt;將Source code 轉換為 IR or AST&lt;/li&gt;
&lt;li&gt;包含lexer、parser&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Optimizer

&lt;ul&gt;
&lt;li&gt;針對於IR進行最佳化，以追求更快的效能或者節省資源。&lt;/li&gt;
&lt;li&gt;在有中間語言的情況下，不需要針對每一種target language撰寫優化。&lt;/li&gt;
&lt;li&gt;也不需要撰寫多種不同的語言轉換。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;BackEnd

&lt;ul&gt;
&lt;li&gt;將IR 轉換為 target language&lt;/li&gt;
&lt;li&gt;instruction selection&lt;/li&gt;
&lt;li&gt;register allocation&lt;/li&gt;
&lt;li&gt;instruction scheduling&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;而 LLVM 也是按照這三個階段的 compiler 設計為基準開發而成。&lt;/p&gt;

&lt;h3 id=&#34;llvm-的-架構&#34;&gt;LLVM 的 架構&lt;/h3&gt;

&lt;p&gt;Source code -&amp;gt; clang(lexer -&amp;gt; parser -&amp;gt; AST) -&amp;gt; LLVM IR -&amp;gt; LLVM bitcode -&amp;gt; object code(machine code) -&amp;gt; linker&lt;/p&gt;

&lt;h3 id=&#34;實際跑一次看看&#34;&gt;實際跑一次看看&lt;/h3&gt;

&lt;p&gt;而用實際上的llvm的module&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;string.h&amp;gt;

int main() {
    int a = 2 + 5;
    int b = a + 10 + 30;
    int c = a * b + 30 + a;
    
    char s[100];
    sprintf(s, &amp;quot;%d&amp;quot;, c);
    puts(s);

    return 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;參考資料&#34;&gt;參考資料&lt;/h2&gt;
</description>
    </item>
    
    <item>
      <title>Fcitx 輸入法與新酷音</title>
      <link>https://bemg.github.io/blog/posts/fcitx-input-method/</link>
      <pubDate>Sun, 25 Feb 2018 12:04:05 +0800</pubDate>
      
      <guid>https://bemg.github.io/blog/posts/fcitx-input-method/</guid>
      <description>

&lt;p&gt;在ubuntu底下有內建輸入法ibus，但是其使用上的體驗與在windows上的新注音輸入法有比較大的隔閡，用起來不是很習慣。在尋找更好的輸入法時，有嘗試過gcin與Rime。下面分別說說他們的缺點。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;gcin

&lt;ul&gt;
&lt;li&gt;這個輸入法沒有辦法自動學習正確的詞彙，以及一開始預設的字典挺小的。用起來時常會打錯字，需要細心的一一修正，用起來不是很方便。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;rime

&lt;ul&gt;
&lt;li&gt;在字典的自動修正上與新詞彙的學習上都較為良好，但是在輸入法的使用上，rime並不會限制你的輸入，也就是說就算你輸入了一連串完全沒有待選字的注音，它還是會讓你繼續輸入，很大程度上要求你字字輸入清楚，用起來壓力很大。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;fcitx&#34;&gt;fcitx&lt;/h2&gt;

&lt;p&gt;於是乎我就找到了另外一款兼具gcin輸入方式與rime的詞彙精準度的輸入法 新酷音。下面簡單的介紹如何安裝與使用。&lt;/p&gt;

&lt;h3 id=&#34;安裝&#34;&gt;安裝&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;sudo apt-get install fcitx fcitx-chewing fcitx-anthy
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;fcitx 是輸入法框架&lt;/li&gt;
&lt;li&gt;chewing 是新酷音&lt;/li&gt;
&lt;li&gt;anthy 是一款日文輸入法&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;設定&#34;&gt;設定&lt;/h3&gt;

&lt;p&gt;System setting -&amp;gt; language support -&amp;gt; language tab -&amp;gt; Keyboard input method system -&amp;gt; 調整為fcitx&lt;/p&gt;

&lt;p&gt;如果沒有跳出fctix，請重新登入系統。&lt;/p&gt;

&lt;p&gt;開啟 fcitx 的 configue 加入，fcitx-chewing與fcitx-anthy。&lt;/p&gt;

&lt;h3 id=&#34;操作&#34;&gt;操作&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ctrl-space&lt;/code&gt; fcitx的啟用與關閉

&lt;ul&gt;
&lt;li&gt;常用於切換成英文輸入&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ctrl-shift&lt;/code&gt; 在fcitx啟動的情況下，循環切換設定的輸入法&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>閱讀列表</title>
      <link>https://bemg.github.io/blog/posts/reading-list/</link>
      <pubDate>Tue, 20 Feb 2018 13:46:39 +0800</pubDate>
      
      <guid>https://bemg.github.io/blog/posts/reading-list/</guid>
      <description>

&lt;p&gt;紀錄一下看過的書，心有餘力會新增對於每本書的評價。&lt;/p&gt;

&lt;p&gt;多少會有暴雷的風險，如果有這方面的顧慮就別看了。&lt;/p&gt;

&lt;h2 id=&#34;歷史類&#34;&gt;歷史類&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;海都物語

&lt;ul&gt;
&lt;li&gt;描寫威尼斯共和國從建國到亡國的興亡史，很明顯的看得出作者對於威尼斯有許多個人情感存在，各種對於威尼斯來說負面的歷史事件都會勇於辯護(例：第四次十字軍東征，威尼斯用計驅使聯軍去攻打君士坦丁堡，順利扶持支持威尼斯的政權;後期，威尼斯對於鄂圖曼土耳其的壓迫，動不動就想要暗殺其領袖，真不知道作者前面描寫那麼多威尼斯因為貿易需要所以兼容並蓄是為了什麼，最後還不是要動刀動槍)，不過也在其中得到了一些從國中以來的困惑。當初國中世界史章節的封面有一張十字軍攻陷君士坦丁堡的畫，可是在於國中歷史課本之中根本沒有去解釋有著大義的十字軍為什麼需要去攻陷有著東羅馬帝國的首都。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;小說&#34;&gt;小說&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;文學少女

&lt;ul&gt;
&lt;li&gt;拿許多知名的經典小說的情節去進行重新的演繹，不過在沒有看過採用的經典的讀者而言，或多或少會失去部份的樂趣。表面上是對於經典情節的重新詮釋，深處其實在於主角的心理陰影(「心葉，你一定不懂吧。」)與女主角布局到最後一集的深意，本傳前後有8本，不算少，看的到是挺輕鬆的，沒有壓力與需要重覆理解的章節。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;大典&lt;/li&gt;
&lt;li&gt;吃掉死神的少女

&lt;ul&gt;
&lt;li&gt;整體看來，著實過於著重在對於戰爭殘酷的描寫，用於去陪襯主角的瘋狂與已經不屬於人的心態。整體的步調顯得沉悶，我給予的評價並沒有如同網路上的評價一樣高。過度描寫的血腥場景只會造成閱讀的障礙。相較之下，對於其他配角的描寫就出色了許多，一如主角的副官在尋找一個可以用來信仰的英雄;軍官為了家族的榮光不惜動用各種狡計;走頭無路的國王對於臣子的寬容。比起主角都更加的像個人。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;盜夢偵探&lt;/li&gt;
&lt;li&gt;新本格魔法少女莉絲佳&lt;/li&gt;
&lt;li&gt;黑暗的左手&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;其他非虛構&#34;&gt;其他非虛構&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;老科技的全球史&lt;/li&gt;
&lt;li&gt;娛樂至死 : 追求表象﹑歡笑和激情的電視時代&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>英文學習</title>
      <link>https://bemg.github.io/blog/posts/learn-english/</link>
      <pubDate>Tue, 20 Feb 2018 13:46:33 +0800</pubDate>
      
      <guid>https://bemg.github.io/blog/posts/learn-english/</guid>
      <description>

&lt;p&gt;紀錄一下到目前為止對於英文學習的心得與方法。&lt;/p&gt;

&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;

&lt;p&gt;英文對我來說很困難，從小學就有的科目而言，長達十幾年的學習。依舊仍然停滯在沒有辦法自在運用的程度。&lt;/p&gt;

&lt;p&gt;直到近期才真正的正視英文能力的養成。故在此紀錄我從2017/07開始至今的英文學習歷程。希望可以給有相同困擾的人一個努力的方向。&lt;/p&gt;

&lt;h2 id=&#34;本文&#34;&gt;本文&lt;/h2&gt;

&lt;h3 id=&#34;目標&#34;&gt;目標&lt;/h3&gt;

&lt;p&gt;我對於學習英文的第一階段目標是&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;閱讀原文文章&lt;/li&gt;
&lt;li&gt;看英文影片&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;也就是聽與讀的部份。&lt;/p&gt;

&lt;p&gt;在技術的方面，由英文所撰寫的第一手文章，其數量與正確度比起經過翻譯的第二手文章來說，都高上許多。&lt;/p&gt;

&lt;p&gt;故先以這兩項能力為目前的目標。&lt;/p&gt;

&lt;h3 id=&#34;閱讀&#34;&gt;閱讀&lt;/h3&gt;

&lt;p&gt;閱讀所使用的材料多半取自於新聞與技術文章。而在閱讀的過程中，我意識到了英文能力低落的關鍵，單字量完全不足，在一句英文句子有高達三個單字完全無法理解的情況下，要理解其想要傳達的含意簡直是癡人說夢。&lt;/p&gt;

&lt;h3 id=&#34;聽力&#34;&gt;聽力&lt;/h3&gt;

&lt;p&gt;我用來練習的影片多半來自於youtube&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/channel/UCCODtTcd5M1JavPCOr_Uydg&#34;&gt;Extra Credits&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;這個頻道有很多的關於歷史與遊戲機制設計的影片。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;很遺憾的是，很多時候沒有辦法聽懂內容跟單字量有相當高的相關，根本就不理解那個單字，是要怎麼可以從一連串的發音中辨識出來想要提供的含意。&lt;/p&gt;

&lt;h2 id=&#34;現階段的努力&#34;&gt;現階段的努力&lt;/h2&gt;

&lt;p&gt;總結上述的問題，充實我的英文單字量是刻不容緩的工作。&lt;/p&gt;

&lt;p&gt;起先我拿出了我塵封已久的高中7000單字書，步上了過去高中的單字學習法。重溫了高中的單字學習的過程中，我進行了幾項對於方法的修正。我不再要求可以對於英文單字每一個字母都可以熟記，雖然因為在於高中時期需要熟記拼字才可以有辦法成功的寫英文考卷。&lt;/p&gt;

&lt;p&gt;我使用了一些輔助的被單字軟體&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;anki

&lt;ul&gt;
&lt;li&gt;免費的，可以用xml或者css客製化字卡的外觀。並且遵循著學習遺忘曲線進行單字的複習。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>